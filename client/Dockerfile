# Step 1: Create and run the React app builder image
# Node.js alpine image include apk to install extra packages
# (i.e. add openssl to generate files for nginx config in Step 2)
# https://stackoverflow.com/questions/45857340/docker-nginx-error-openssl-command-not-found
#
FROM node:16.17-alpine AS builder

# Create app directory (see: https://www.pathname.com/fhs/pub/fhs-2.3.html#PURPOSE23)
#
WORKDIR /usr/local/src

# Comment lines (needed for Docker Desktop testing) and rebuild image before deploying to K8s
# Installs openssl to generate platform-specific dhparams.pem & key/cert material
# (needed by nginx TLS config (Step 2), where these aren't injected by K8s initialisation)
#
# If not required, change FROM above to: FROM node:16.17.0-bullseye-slim
#  (Alpine images not officially supported, so unless apk is required, better to use LTS version of official image)
#
RUN apk update \
      && apk add openssl \
      && openssl dhparam -out /usr/local/src/dhparam.pem 2048 \
      && openssl req -x509 -nodes -days 365 -subj "/C=CA/ST=QC/O=Company, Inc./CN=mydomain.com" -addext "subjectAltName=DNS:mydomain.com" -newkey rsa:2048 -keyout /usr/local/src/.nginx-selfsigned.key -out /usr/local/src/.nginx-selfsigned.crt

# Package.json*.json specify NPM packages used by app
# Package-lock.json stipulates specific versions of required packages
#
COPY package*.json /usr/local/src/

# Comment line (needed for Docker Desktop testing) and rebuild image before deploying to K8s
# App will load these hard-wired secret properties from the .env
#
COPY .env /usr/local/src/

# Option 1. Install for Production?, i.e. install strictly per package-lock.json, deleting node_modules beforehand
#
RUN npm ci --only=production

# Option 2. Install only for Development?
#
# RUN npm install

# Install app source, i.e. two main folders exactly matching necessary React folder structure
# https://create-react-app.dev/docs/folder-structure/
#
COPY public /usr/local/src/public
COPY src /usr/local/src/src

# Build the above 
RUN npm run build


# Step 2. Build and run main app image which starts nginx to serve React app artefacts (built above)
# (React app runtime artefacts copied from /usr/local/src/build above)
# https://www.nginx.com/blog/deploying-nginx-nginx-plus-docker/
#
FROM nginx

# Copy in main React app artefacts (built in Step 1)
# Note. .env (if it exists, see above) will provide start-up env settings
#
COPY --from=builder /usr/local/src/build /usr/local/src/.env /usr/share/nginx/html

# Remove default (less secure) nginx configs
#
RUN rm /etc/nginx/nginx.conf /etc/nginx/conf.d/default.conf

# Copy in the dhparams.pem and self-signed key/cert material (generated by Step 1)
# (needed by the secure nginx config to enable TLS)
#
COPY --from=builder /usr/local/src/dhparam.pem /etc/nginx/ssl/

# Comment lines (needed for Docker Desktop testing) and rebuild image before deploying to K8s
# Copies self-signed key + cert (generated in Step 1) into load locations
# (needed by nginx TLS config (see nginx.conf), where these aren't injected by K8s initialisation)
# /etc/nginx/ssl/
#
COPY --from=builder /usr/local/src/.nginx-selfsigned.key /var/.cert/
COPY --from=builder /usr/local/src/.nginx-selfsigned.crt /var/.cert/

# Deploy highly secure nginx config
# https://gist.github.com/plentz/6737338
#
COPY nginx.conf /etc/nginx/

EXPOSE 443
CMD ["nginx", "-g", "daemon off;"]
